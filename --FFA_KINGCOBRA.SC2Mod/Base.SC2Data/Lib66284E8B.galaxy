include "TriggerLibs/NativeLib"

include "Lib66284E8B_h"

//--------------------------------------------------------------------------------------------------
// Library: KING OF THE HILL
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib66284E8B_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib66284E8B_InitVariables_completed = false;

void lib66284E8B_InitVariables () {
    if (lib66284E8B_InitVariables_completed) {
        return;
    }

    lib66284E8B_InitVariables_completed = true;

    lib66284E8B_gv_observer = CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny);
    lib66284E8B_gv_observerGroup = PlayerGroupSingle(CatalogFieldValueGetAsInt(c_gameCatalogGameUI, "Dflt", "DefaultObservedPlayerId", c_playerAny));
    lib66284E8B_gv_koth_help = StringExternal("Param/Value/lib_66284E8B_CE13F729");
    lib66284E8B_gv_death_zone_help = StringExternal("Param/Value/lib_66284E8B_BAE5DFE9");
    lib66284E8B_gv_hill_radius = 9;
    lib66284E8B_gv_hill = RegionEmpty();
    lib66284E8B_gv_koth_filter = UnitFilter(0, 0, 0, 0);
    lib66284E8B_gv_preparation_timer = TimerCreate();
    lib66284E8B_gv_preparation_timer_window = c_timerWindowNone;
    lib66284E8B_gv_koth_timer = TimerCreate();
    lib66284E8B_gv_koth_timer_window = c_timerWindowNone;
    lib66284E8B_gv_time_for_win = 60;
    lib66284E8B_gv_death_zone = RegionEmpty();
    lib66284E8B_gv_death_zone_radius = 20;
}

// Functions
bool lib66284E8B_gf_acceptable_unit_for_koth (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "Adept") || (UnitGetType(lp_unit) == "Archon") || (UnitGetType(lp_unit) == "Carrier") || (UnitGetType(lp_unit) == "Colossus") || (UnitGetType(lp_unit) == "DarkTemplar") || (UnitGetType(lp_unit) == "Disruptor") || (UnitGetType(lp_unit) == "HighTemplar") || (UnitGetType(lp_unit) == "Immortal") || (UnitGetType(lp_unit) == "Mothership") || (UnitGetType(lp_unit) == "MothershipCore") || (UnitGetType(lp_unit) == "Observer") || (UnitGetType(lp_unit) == "ObserverSiegeMode") || (UnitGetType(lp_unit) == "Oracle") || (UnitGetType(lp_unit) == "Phoenix") || (UnitGetType(lp_unit) == "Probe") || (UnitGetType(lp_unit) == "Sentry") || (UnitGetType(lp_unit) == "Stalker") || (UnitGetType(lp_unit) == "Tempest") || (UnitGetType(lp_unit) == "VoidRay") || (UnitGetType(lp_unit) == "WarpPrismPhasing") || (UnitGetType(lp_unit) == "WarpPrism") || (UnitGetType(lp_unit) == "Zealot") || (UnitGetType(lp_unit) == "Banshee") || (UnitGetType(lp_unit) == "Battlecruiser") || (UnitGetType(lp_unit) == "Cyclone") || (UnitGetType(lp_unit) == "Ghost") || (UnitGetType(lp_unit) == "HellionTank") || (UnitGetType(lp_unit) == "Hellion") || (UnitGetType(lp_unit) == "Liberator") || (UnitGetType(lp_unit) == "LiberatorAG") || (UnitGetType(lp_unit) == "Marauder") || (UnitGetType(lp_unit) == "Marine") || (UnitGetType(lp_unit) == "Medivac") || (UnitGetType(lp_unit) == "Raven") || (UnitGetType(lp_unit) == "Reaper") || (UnitGetType(lp_unit) == "SCV") || (UnitGetType(lp_unit) == "SiegeTankSieged") || (UnitGetType(lp_unit) == "SiegeTank") || (UnitGetType(lp_unit) == "Thor") || (UnitGetType(lp_unit) == "ThorAP") || (UnitGetType(lp_unit) == "VikingAssault") || (UnitGetType(lp_unit) == "VikingFighter") || (UnitGetType(lp_unit) == "WidowMine") || (UnitGetType(lp_unit) == "WidowMineBurrowed") || (UnitGetType(lp_unit) == "Baneling") || (UnitGetType(lp_unit) == "BanelingBurrowed") || (UnitGetType(lp_unit) == "BanelingCocoon") || (UnitGetType(lp_unit) == "BroodLord") || (UnitGetType(lp_unit) == "BroodLordCocoon") || (UnitGetType(lp_unit) == "Corruptor") || (UnitGetType(lp_unit) == "Drone") || (UnitGetType(lp_unit) == "DroneBurrowed") || (UnitGetType(lp_unit) == "Hydralisk") || (UnitGetType(lp_unit) == "HydraliskBurrowed") || (UnitGetType(lp_unit) == "Infestor") || (UnitGetType(lp_unit) == "InfestorBurrowed") || (UnitGetType(lp_unit) == "LurkerMP") || (UnitGetType(lp_unit) == "LurkerMPBurrowed") || (UnitGetType(lp_unit) == "LurkerMPEgg") || (UnitGetType(lp_unit) == "Mutalisk") || (UnitGetType(lp_unit) == "Overlord") || (UnitGetType(lp_unit) == "OverlordTransport") || (UnitGetType(lp_unit) == "Overseer") || (UnitGetType(lp_unit) == "OverseerSiegeMode") || (UnitGetType(lp_unit) == "OverlordCocoon") || (UnitGetType(lp_unit) == "Queen") || (UnitGetType(lp_unit) == "QueenBurrowed") || (UnitGetType(lp_unit) == "Ravager") || (UnitGetType(lp_unit) == "RavagerBurrowed") || (UnitGetType(lp_unit) == "RavagerCocoon") || (UnitGetType(lp_unit) == "Roach") || (UnitGetType(lp_unit) == "RoachBurrowed") || (UnitGetType(lp_unit) == "SwarmHostMP") || (UnitGetType(lp_unit) == "SwarmHostBurrowedMP") || (UnitGetType(lp_unit) == "Ultralisk") || (UnitGetType(lp_unit) == "UltraliskBurrowed") || (UnitGetType(lp_unit) == "Viper") || (UnitGetType(lp_unit) == "Zergling") || (UnitGetType(lp_unit) == "ZerglingBurrowed"))) {
        return true;
    }
    else {
        return false;
    }
}

int lib66284E8B_gf_get_buff_count (unit lp_unit) {
    // Variable Declarations
    int lv_count;
    fixed lv_unit_hp;
    fixed lv_unit_shield;
    int lv_sum_hp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit_hp = UnitTypeGetProperty(UnitGetType(lp_unit), c_unitPropLifeMax);
    lv_unit_shield = UnitTypeGetProperty(UnitGetType(lp_unit), c_unitPropShieldsMax);
    lv_sum_hp = (FixedToInt(lv_unit_hp) + FixedToInt(lv_unit_shield));

    // Implementation
    lv_count = RoundI((lv_sum_hp / 25.0));
    return lv_count;
}

bool lib66284E8B_gf_acceptable_unit_for_death_zone (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "Adept") || (UnitGetType(lp_unit) == "Archon") || (UnitGetType(lp_unit) == "Carrier") || (UnitGetType(lp_unit) == "Colossus") || (UnitGetType(lp_unit) == "DarkTemplar") || (UnitGetType(lp_unit) == "Disruptor") || (UnitGetType(lp_unit) == "HighTemplar") || (UnitGetType(lp_unit) == "Immortal") || (UnitGetType(lp_unit) == "Mothership") || (UnitGetType(lp_unit) == "MothershipCore") || (UnitGetType(lp_unit) == "Observer") || (UnitGetType(lp_unit) == "ObserverSiegeMode") || (UnitGetType(lp_unit) == "Oracle") || (UnitGetType(lp_unit) == "Phoenix") || (UnitGetType(lp_unit) == "Sentry") || (UnitGetType(lp_unit) == "Stalker") || (UnitGetType(lp_unit) == "Tempest") || (UnitGetType(lp_unit) == "VoidRay") || (UnitGetType(lp_unit) == "WarpPrismPhasing") || (UnitGetType(lp_unit) == "WarpPrism") || (UnitGetType(lp_unit) == "Zealot") || (UnitGetType(lp_unit) == "Banshee") || (UnitGetType(lp_unit) == "Battlecruiser") || (UnitGetType(lp_unit) == "Cyclone") || (UnitGetType(lp_unit) == "Ghost") || (UnitGetType(lp_unit) == "HellionTank") || (UnitGetType(lp_unit) == "Hellion") || (UnitGetType(lp_unit) == "Liberator") || (UnitGetType(lp_unit) == "LiberatorAG") || (UnitGetType(lp_unit) == "Marauder") || (UnitGetType(lp_unit) == "Marine") || (UnitGetType(lp_unit) == "Medivac") || (UnitGetType(lp_unit) == "Raven") || (UnitGetType(lp_unit) == "Reaper") || (UnitGetType(lp_unit) == "SiegeTankSieged") || (UnitGetType(lp_unit) == "SiegeTank") || (UnitGetType(lp_unit) == "Thor") || (UnitGetType(lp_unit) == "ThorAP") || (UnitGetType(lp_unit) == "VikingAssault") || (UnitGetType(lp_unit) == "VikingFighter") || (UnitGetType(lp_unit) == "WidowMine") || (UnitGetType(lp_unit) == "WidowMineBurrowed") || (UnitGetType(lp_unit) == "Baneling") || (UnitGetType(lp_unit) == "BanelingBurrowed") || (UnitGetType(lp_unit) == "BanelingCocoon") || (UnitGetType(lp_unit) == "BroodLord") || (UnitGetType(lp_unit) == "BroodLordCocoon") || (UnitGetType(lp_unit) == "Corruptor") || (UnitGetType(lp_unit) == "Hydralisk") || (UnitGetType(lp_unit) == "HydraliskBurrowed") || (UnitGetType(lp_unit) == "Infestor") || (UnitGetType(lp_unit) == "InfestorBurrowed") || (UnitGetType(lp_unit) == "LurkerMPBurrowed") || (UnitGetType(lp_unit) == "LurkerMP") || (UnitGetType(lp_unit) == "LurkerMPEgg") || (UnitGetType(lp_unit) == "Mutalisk") || (UnitGetType(lp_unit) == "OverlordTransport") || (UnitGetType(lp_unit) == "Overseer") || (UnitGetType(lp_unit) == "OverseerSiegeMode") || (UnitGetType(lp_unit) == "OverlordCocoon") || (UnitGetType(lp_unit) == "Queen") || (UnitGetType(lp_unit) == "QueenBurrowed") || (UnitGetType(lp_unit) == "Ravager") || (UnitGetType(lp_unit) == "RavagerBurrowed") || (UnitGetType(lp_unit) == "RavagerCocoon") || (UnitGetType(lp_unit) == "Roach") || (UnitGetType(lp_unit) == "RoachBurrowed") || (UnitGetType(lp_unit) == "SwarmHostMP") || (UnitGetType(lp_unit) == "SwarmHostBurrowedMP") || (UnitGetType(lp_unit) == "Ultralisk") || (UnitGetType(lp_unit) == "UltraliskBurrowed") || (UnitGetType(lp_unit) == "Viper") || (UnitGetType(lp_unit) == "Zergling") || (UnitGetType(lp_unit) == "ZerglingBurrowed"))) {
        return true;
    }
    else {
        return false;
    }
}

void lib66284E8B_gf_update_queen_protection (int lp_player) {
    // Variable Declarations
    int lv_queens;
    int lv_hatches;

    // Automatic Variable Declarations
    unitgroup autoCCC856C0_g;
    int autoCCC856C0_u;
    unit autoCCC856C0_var;
    unitgroup autoE462CEA4_g;
    int autoE462CEA4_u;
    unit autoE462CEA4_var;
    unitgroup auto5FF405C0_g;
    int auto5FF405C0_u;
    unit auto5FF405C0_var;
    unitgroup auto698C96EF_g;
    int auto698C96EF_u;
    unit auto698C96EF_var;

    // Variable Initialization

    // Implementation
    lv_queens = UnitCount("Queen", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    lv_queens += UnitCount("QueenBurrowed", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    lv_hatches += UnitCount("Hatchery", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    lv_hatches += UnitCount("Lair", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    lv_hatches += UnitCount("Hive", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    if ((lv_queens > lv_hatches)) {
        auto5FF405C0_g = UnitGroup("Queen", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        auto5FF405C0_u = UnitGroupCount(auto5FF405C0_g, c_unitCountAll);
        for (;; auto5FF405C0_u -= 1) {
            auto5FF405C0_var = UnitGroupUnitFromEnd(auto5FF405C0_g, auto5FF405C0_u);
            if (auto5FF405C0_var == null) { break; }
            UnitBehaviorRemove(auto5FF405C0_var, "death_zone_protection_permanent_queen", c_unitBehaviorCountAll);
        }
        auto698C96EF_g = UnitGroup("QueenBurrowed", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        auto698C96EF_u = UnitGroupCount(auto698C96EF_g, c_unitCountAll);
        for (;; auto698C96EF_u -= 1) {
            auto698C96EF_var = UnitGroupUnitFromEnd(auto698C96EF_g, auto698C96EF_u);
            if (auto698C96EF_var == null) { break; }
            UnitBehaviorRemove(auto698C96EF_var, "death_zone_protection_permanent_queen", c_unitBehaviorCountAll);
        }
    }
    else {
        autoCCC856C0_g = UnitGroup("Queen", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        autoCCC856C0_u = UnitGroupCount(autoCCC856C0_g, c_unitCountAll);
        for (;; autoCCC856C0_u -= 1) {
            autoCCC856C0_var = UnitGroupUnitFromEnd(autoCCC856C0_g, autoCCC856C0_u);
            if (autoCCC856C0_var == null) { break; }
            libNtve_gf_SetBehaviorCount(autoCCC856C0_var, "death_zone_protection_permanent_queen", autoCCC856C0_var, 1);
        }
        autoE462CEA4_g = UnitGroup("QueenBurrowed", lp_player, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        autoE462CEA4_u = UnitGroupCount(autoE462CEA4_g, c_unitCountAll);
        for (;; autoE462CEA4_u -= 1) {
            autoE462CEA4_var = UnitGroupUnitFromEnd(autoE462CEA4_g, autoE462CEA4_u);
            if (autoE462CEA4_var == null) { break; }
            libNtve_gf_SetBehaviorCount(autoE462CEA4_var, "death_zone_protection_permanent_queen", autoE462CEA4_var, 1);
        }
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: set observer
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_setobserver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0E7C6746_g;
    int auto0E7C6746_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UIUnitColorStyleOverride(lib66284E8B_gv_observerGroup, c_unitColorStyleNormal);
    auto0E7C6746_g = PlayerGroupActive();
    auto0E7C6746_var = -1;
    while (true) {
        auto0E7C6746_var = PlayerGroupNextPlayer(auto0E7C6746_g, auto0E7C6746_var);
        if (auto0E7C6746_var < 0) { break; }
        libNtve_gf_SetAllianceOneWay(lib66284E8B_gv_observer, auto0E7C6746_var, libNtve_ge_AllianceSetting_Neutral);
        PlayerSetAlliance(auto0E7C6746_var, c_allianceIdDefeat, lib66284E8B_gv_observer, true);
        PlayerSetAlliance(auto0E7C6746_var, c_allianceIdPassive, lib66284E8B_gv_observer, true);
        PlayerSetAlliance(auto0E7C6746_var, c_allianceIdControl, lib66284E8B_gv_observer, true);
        PlayerSetAlliance(auto0E7C6746_var, c_allianceIdVision, lib66284E8B_gv_observer, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_setobserver_Init () {
    lib66284E8B_gt_setobserver = TriggerCreate("lib66284E8B_gt_setobserver_Func");
    TriggerAddEventMapInit(lib66284E8B_gt_setobserver);
}

//--------------------------------------------------------------------------------------------------
// Trigger: create_hill
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_create_hill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoCDCF5B1C_g;
    int autoCDCF5B1C_var;

    // Conditions
    if (testConds) {
        if (!(((GameAttributeGameValue("1") == "0001") || (GameAttributeGameValue("1") == "0003")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lib66284E8B_gv_koth_help);
    lib66284E8B_gv_hill = RegionCircle(RegionGetCenter(RegionPlayableMap()), lib66284E8B_gv_hill_radius);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "koth_hill", c_unitCreateIgnorePlacement, 0, RegionGetCenter(lib66284E8B_gv_hill));
    DataTableSetUnit(true, "koth_hill", UnitLastCreated());
    if ((GameAttributeGameValue("6") == "0002")) {
        autoCDCF5B1C_g = PlayerGroupActive();
        autoCDCF5B1C_var = -1;
        while (true) {
            autoCDCF5B1C_var = PlayerGroupNextPlayer(autoCDCF5B1C_g, autoCDCF5B1C_var);
            if (autoCDCF5B1C_var < 0) { break; }
            VisRevealArea(autoCDCF5B1C_var, lib66284E8B_gv_hill, 0.0, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_create_hill_Init () {
    lib66284E8B_gt_create_hill = TriggerCreate("lib66284E8B_gt_create_hill_Func");
    TriggerAddEventMapInit(lib66284E8B_gt_create_hill);
}

//--------------------------------------------------------------------------------------------------
// Trigger: fill_filter
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_fill_filter_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameAttributeGameValue("1") == "0001") || (GameAttributeGameValue("1") == "0003")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib66284E8B_gv_koth_filter = UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHallucination - 32)));
    if ((GameAttributeGameValue("7") == "0003")) {
        lib66284E8B_gv_koth_filter = UnitFilter(0, 0, (1 << c_targetFilterAir), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_66284E8B_D3B54435"));
    }
    else if ((GameAttributeGameValue("7") == "0002")) {
        lib66284E8B_gv_koth_filter = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_66284E8B_EE6D6A7C"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_fill_filter_Init () {
    lib66284E8B_gt_fill_filter = TriggerCreate("lib66284E8B_gt_fill_filter_Func");
    TriggerAddEventMapInit(lib66284E8B_gt_fill_filter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: preparation_timer
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_preparation_timer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_preparation_time;

    // Automatic Variable Declarations
    string autoBE7201C3_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((GameAttributeGameValue("1") == "0001") || (GameAttributeGameValue("1") == "0003")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBE7201C3_val = GameAttributeGameValue("4");
    if (autoBE7201C3_val == "0001") {
        lv_preparation_time = 1;
    }
    else if (autoBE7201C3_val == "0002") {
        lv_preparation_time = 300;
    }
    else if (autoBE7201C3_val == "0003") {
        lv_preparation_time = 600;
    }
    else if (autoBE7201C3_val == "0004") {
        lv_preparation_time = 900;
    }
    else if (autoBE7201C3_val == "0005") {
        lv_preparation_time = 1200;
    }
    else if (autoBE7201C3_val == "0006") {
        lv_preparation_time = 1500;
    }
    else {
        lv_preparation_time = 300;
    }
    if ((lv_preparation_time > 0)) {
        TimerStart(lib66284E8B_gv_preparation_timer, lv_preparation_time, false, c_timeReal);
        TimerWindowCreate(lib66284E8B_gv_preparation_timer, StringExternal("Param/Value/lib_66284E8B_422B18F6"), true, false);
        lib66284E8B_gv_preparation_timer_window = TimerWindowLastCreated();
        lib66284E8B_gv_preparation_active = true;
        TimerWindowSetAnchor(lib66284E8B_gv_preparation_timer_window, c_anchorTopRight, 0, 20);
        TimerWindowShowBorder(lib66284E8B_gv_preparation_timer_window, false);
        TimerWindowSetFixedHeight(lib66284E8B_gv_preparation_timer_window, 20);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_preparation_timer_Init () {
    lib66284E8B_gt_preparation_timer = TriggerCreate("lib66284E8B_gt_preparation_timer_Func");
    TriggerAddEventMapInit(lib66284E8B_gt_preparation_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: preparation_end
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_preparation_end_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowDestroy(lib66284E8B_gv_preparation_timer_window);
    lib66284E8B_gv_preparation_active = false;
    TriggerSendEvent("start_koth");
    if ((GameAttributeGameValue("4") != "0001")) {
        libNtve_gf_SendTransmissionSimple(TransmissionSourceFromModel(null), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_TopLeft), SoundLink("zVO_ProtossOracle_ProtossFlyingCaster_010", 0), 0.0, c_transmissionDurationAdd, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_preparation_end_Init () {
    lib66284E8B_gt_preparation_end = TriggerCreate("lib66284E8B_gt_preparation_end_Func");
    TriggerAddEventTimer(lib66284E8B_gt_preparation_end, lib66284E8B_gv_preparation_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: get_time_for_win
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_get_time_for_win_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto5BB14268_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5BB14268_val = GameAttributeGameValue("3");
    if (auto5BB14268_val == "0001") {
        lib66284E8B_gv_time_for_win = 30;
    }
    else if (auto5BB14268_val == "0002") {
        lib66284E8B_gv_time_for_win = 45;
    }
    else if (auto5BB14268_val == "0003") {
        lib66284E8B_gv_time_for_win = 60;
    }
    else if (auto5BB14268_val == "0004") {
        lib66284E8B_gv_time_for_win = 75;
    }
    else if (auto5BB14268_val == "0005") {
        lib66284E8B_gv_time_for_win = 90;
    }
    else if (auto5BB14268_val == "0007") {
        lib66284E8B_gv_time_for_win = 105;
    }
    else if (auto5BB14268_val == "0006") {
        lib66284E8B_gv_time_for_win = 120;
    }
    else {
        lib66284E8B_gv_time_for_win = 60;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_get_time_for_win_Init () {
    lib66284E8B_gt_get_time_for_win = TriggerCreate("lib66284E8B_gt_get_time_for_win_Func");
    TriggerAddEventMapInit(lib66284E8B_gt_get_time_for_win);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cycle
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_cycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players_in_hill;

    // Automatic Variable Declarations
    playergroup auto12AA1EE8_g;
    int auto12AA1EE8_var;
    unitgroup auto12E69AF8_g;
    int auto12E69AF8_u;
    unit auto12E69AF8_var;
    playergroup auto99A845D3_g;
    int auto99A845D3_var;

    // Variable Initialization
    lv_players_in_hill = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lib66284E8B_gv_preparation_active == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib66284E8B_gv_prev_controller = lib66284E8B_gv_current_controller;
    auto12AA1EE8_g = PlayerGroupActive();
    auto12AA1EE8_var = -1;
    while (true) {
        auto12AA1EE8_var = PlayerGroupNextPlayer(auto12AA1EE8_g, auto12AA1EE8_var);
        if (auto12AA1EE8_var < 0) { break; }
        auto12E69AF8_g = UnitGroup(null, auto12AA1EE8_var, lib66284E8B_gv_hill, lib66284E8B_gv_koth_filter, 0);
        auto12E69AF8_u = UnitGroupCount(auto12E69AF8_g, c_unitCountAll);
        for (;; auto12E69AF8_u -= 1) {
            auto12E69AF8_var = UnitGroupUnitFromEnd(auto12E69AF8_g, auto12E69AF8_u);
            if (auto12E69AF8_var == null) { break; }
            if (lib66284E8B_gf_acceptable_unit_for_koth(auto12E69AF8_var) && (PlayerStatus(UnitGetOwner(auto12E69AF8_var)) == c_playerStatusActive)) {
                PlayerGroupAdd(lv_players_in_hill, UnitGetOwner(auto12E69AF8_var));
                break;
            }

        }
    }
    if ((PlayerGroupCount(lv_players_in_hill) == 0)) {
        lib66284E8B_gv_current_controller = 0;
        lib66284E8B_gv_contested = false;
    }

    if ((PlayerGroupCount(lv_players_in_hill) == 1)) {
        lib66284E8B_gv_current_controller = PlayerGroupPlayer(libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, PlayerGroupPlayer(lv_players_in_hill, 1)), 1);
        if ((lib66284E8B_gv_contested == true) && (lib66284E8B_gv_current_controller == lib66284E8B_gv_prev_controller)) {
            TimerPause(lib66284E8B_gv_koth_timer, false);
            lib66284E8B_gv_contested = false;
        }

    }

    if ((PlayerGroupCount(lv_players_in_hill) > 1)) {
        auto99A845D3_g = lv_players_in_hill;
        auto99A845D3_var = -1;
        while (true) {
            auto99A845D3_var = PlayerGroupNextPlayer(auto99A845D3_g, auto99A845D3_var);
            if (auto99A845D3_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(PlayerGroupPlayer(lv_players_in_hill, 1), auto99A845D3_var, libNtve_ge_PlayerRelation_AllyMutual) == false)) {
                if ((lib66284E8B_gv_contested == false)) {
                    lib66284E8B_gv_contested = true;
                    TimerPause(lib66284E8B_gv_koth_timer, true);
                }

                break;
            }
            else {
                lib66284E8B_gv_contested = false;
            }
        }
        if ((lib66284E8B_gv_contested == false)) {
            lib66284E8B_gv_current_controller = PlayerGroupPlayer(libNtve_gf_AlliesEnemiesOfPlayerCountInactiveAndSelf(libNtve_ge_PlayerRelation_AllyMutual, PlayerGroupPlayer(lv_players_in_hill, 1)), 1);
            if ((TimerIsPaused(lib66284E8B_gv_koth_timer) == true) && (lib66284E8B_gv_current_controller == lib66284E8B_gv_prev_controller)) {
                TimerPause(lib66284E8B_gv_koth_timer, false);
            }

        }

    }

    if ((lib66284E8B_gv_prev_controller != lib66284E8B_gv_current_controller) && (lib66284E8B_gv_current_controller != 0)) {
        TimerRestart(lib66284E8B_gv_koth_timer);
        TextExpressionSetToken("Param/Expression/lib_66284E8B_A6EE9058", "A", StringExternal("Param/Value/lib_66284E8B_38589CD0"));
        TextExpressionSetToken("Param/Expression/lib_66284E8B_A6EE9058", "B", TextWithColor(PlayerName(lib66284E8B_gv_current_controller), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lib66284E8B_gv_current_controller, false))));
        TimerWindowSetTitle(lib66284E8B_gv_koth_timer_window, TextExpressionAssemble("Param/Expression/lib_66284E8B_A6EE9058"));
        TimerPause(lib66284E8B_gv_koth_timer, false);
        libNtve_gf_SendActorMessageToUnit(DataTableGetUnit(true, "koth_hill"), libNtve_gf_SetTintColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lib66284E8B_gv_current_controller, false)), 1.0, 0.5));
    }

    if ((lib66284E8B_gv_prev_controller != lib66284E8B_gv_current_controller) && (lib66284E8B_gv_current_controller == 0)) {
        TimerRestart(lib66284E8B_gv_koth_timer);
        TimerPause(lib66284E8B_gv_koth_timer, true);
        TextExpressionSetToken("Param/Expression/lib_66284E8B_C3CE1FB0", "A", StringExternal("Param/Value/lib_66284E8B_3CE55137"));
        TextExpressionSetToken("Param/Expression/lib_66284E8B_C3CE1FB0", "B", StringExternal("Param/Value/lib_66284E8B_5D9DF8F0"));
        TimerWindowSetTitle(lib66284E8B_gv_koth_timer_window, TextExpressionAssemble("Param/Expression/lib_66284E8B_C3CE1FB0"));
        libNtve_gf_SendActorMessageToUnit(DataTableGetUnit(true, "koth_hill"), libNtve_gf_SetTintColor(libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lib66284E8B_gv_current_controller, false)), 1.0, 0.5));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_cycle_Init () {
    lib66284E8B_gt_cycle = TriggerCreate("lib66284E8B_gt_cycle_Func");
    TriggerAddEventTimePeriodic(lib66284E8B_gt_cycle, 0.25, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: create_koth_timer_window
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_create_koth_timer_window_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lib66284E8B_gv_koth_timer, lib66284E8B_gv_time_for_win, false, c_timeReal);
    TimerPause(lib66284E8B_gv_koth_timer, true);
    TextExpressionSetToken("Param/Expression/lib_66284E8B_8FF97892", "A", StringExternal("Param/Value/lib_66284E8B_7B35ED96"));
    TextExpressionSetToken("Param/Expression/lib_66284E8B_8FF97892", "B", StringExternal("Param/Value/lib_66284E8B_AD0907B4"));
    TimerWindowCreate(lib66284E8B_gv_koth_timer, TextExpressionAssemble("Param/Expression/lib_66284E8B_8FF97892"), true, false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), true);
    lib66284E8B_gv_koth_timer_window = TimerWindowLastCreated();
    TimerWindowSetAnchor(lib66284E8B_gv_koth_timer_window, c_anchorTop, 0, -30);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_create_koth_timer_window_Init () {
    lib66284E8B_gt_create_koth_timer_window = TriggerCreate("lib66284E8B_gt_create_koth_timer_window_Func");
    TriggerAddEventGeneric(lib66284E8B_gt_create_koth_timer_window, "start_koth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: koth_winner
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_koth_winner_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9157E19B_g;
    int auto9157E19B_var;
    playergroup autoFF5CE455_g;
    int autoFF5CE455_var;

    // Actions
    if (!runActions) {
        return true;
    }

    GameOver(lib66284E8B_gv_current_controller, c_gameOverVictory, true, true);
    auto9157E19B_g = PlayerGroupAlliance(c_playerGroupAlly, lib66284E8B_gv_current_controller);
    auto9157E19B_var = -1;
    while (true) {
        auto9157E19B_var = PlayerGroupNextPlayer(auto9157E19B_g, auto9157E19B_var);
        if (auto9157E19B_var < 0) { break; }
        GameOver(auto9157E19B_var, c_gameOverVictory, true, true);
    }
    autoFF5CE455_g = PlayerGroupAlliance(c_playerGroupEnemy, lib66284E8B_gv_current_controller);
    autoFF5CE455_var = -1;
    while (true) {
        autoFF5CE455_var = PlayerGroupNextPlayer(autoFF5CE455_g, autoFF5CE455_var);
        if (autoFF5CE455_var < 0) { break; }
        GameOver(autoFF5CE455_var, c_gameOverDefeat, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_koth_winner_Init () {
    lib66284E8B_gt_koth_winner = TriggerCreate("lib66284E8B_gt_koth_winner_Func");
    TriggerAddEventTimer(lib66284E8B_gt_koth_winner, lib66284E8B_gv_koth_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: player_defeated
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_player_defeated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto5F64FCC3_g;
    int auto5F64FCC3_u;
    unit auto5F64FCC3_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5F64FCC3_g = UnitGroup(null, EventPlayer(), lib66284E8B_gv_hill, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0);
    auto5F64FCC3_u = UnitGroupCount(auto5F64FCC3_g, c_unitCountAll);
    for (;; auto5F64FCC3_u -= 1) {
        auto5F64FCC3_var = UnitGroupUnitFromEnd(auto5F64FCC3_g, auto5F64FCC3_u);
        if (auto5F64FCC3_var == null) { break; }
        UnitKill(auto5F64FCC3_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_player_defeated_Init () {
    lib66284E8B_gt_player_defeated = TriggerCreate("lib66284E8B_gt_player_defeated_Func");
    TriggerAddEventAlert(lib66284E8B_gt_player_defeated, c_playerAny, "DefeatAlert");
}

//--------------------------------------------------------------------------------------------------
// Trigger: create_death_zone
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_create_death_zone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((GameAttributeGameValue("1") == "0003")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, lib66284E8B_gv_death_zone_help);
    lib66284E8B_gv_death_zone = RegionCircle(RegionGetCenter(RegionPlayableMap()), lib66284E8B_gv_death_zone_radius);
    lib66284E8B_gv_death_zone_active = true;
    UnitBehaviorAdd(DataTableGetUnit(true, "koth_hill"), "KothHillDeathZoneRadius", DataTableGetUnit(true, "koth_hill"), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_create_death_zone_Init () {
    lib66284E8B_gt_create_death_zone = TriggerCreate("lib66284E8B_gt_create_death_zone_Func");
    TriggerAddEventMapInit(lib66284E8B_gt_create_death_zone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: add_buffs_to_new_units 2
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_add_buffs_to_new_units2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto1B99603B_g;
    int auto1B99603B_u;
    unit auto1B99603B_var;
    unitgroup auto178C6545_g;
    int auto178C6545_u;
    unit auto178C6545_var;
    playergroup autoA90E0F88_g;
    int autoA90E0F88_var;

    // Conditions
    if (testConds) {
        if (!(((lib66284E8B_gv_death_zone_active == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1B99603B_g = UnitGroup(null, c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    auto1B99603B_u = UnitGroupCount(auto1B99603B_g, c_unitCountAll);
    for (;; auto1B99603B_u -= 1) {
        auto1B99603B_var = UnitGroupUnitFromEnd(auto1B99603B_g, auto1B99603B_u);
        if (auto1B99603B_var == null) { break; }
        if (lib66284E8B_gf_acceptable_unit_for_death_zone(auto1B99603B_var)) {
            UnitBehaviorAdd(auto1B99603B_var, "disable_hp_regen", auto1B99603B_var, 1);
            UnitBehaviorAdd(auto1B99603B_var, "death_zone_protect", auto1B99603B_var, 1);
            UnitBehaviorAdd(auto1B99603B_var, "death_zone_damage", auto1B99603B_var, lib66284E8B_gf_get_buff_count(auto1B99603B_var));
        }

    }
    auto178C6545_g = UnitGroup(null, c_playerAny, lib66284E8B_gv_death_zone, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
    auto178C6545_u = UnitGroupCount(auto178C6545_g, c_unitCountAll);
    for (;; auto178C6545_u -= 1) {
        auto178C6545_var = UnitGroupUnitFromEnd(auto178C6545_g, auto178C6545_u);
        if (auto178C6545_var == null) { break; }
        if (lib66284E8B_gf_acceptable_unit_for_death_zone(auto178C6545_var)) {
            UnitBehaviorAdd(auto178C6545_var, "death_zone_protection_permanent", auto178C6545_var, 1);
        }

    }
    autoA90E0F88_g = PlayerGroupActive();
    autoA90E0F88_var = -1;
    while (true) {
        autoA90E0F88_var = PlayerGroupNextPlayer(autoA90E0F88_g, autoA90E0F88_var);
        if (autoA90E0F88_var < 0) { break; }
        lib66284E8B_gf_update_queen_protection(autoA90E0F88_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_add_buffs_to_new_units2_Init () {
    lib66284E8B_gt_add_buffs_to_new_units2 = TriggerCreate("lib66284E8B_gt_add_buffs_to_new_units2_Func");
    TriggerAddEventGeneric(lib66284E8B_gt_add_buffs_to_new_units2, "start_koth");
}

//--------------------------------------------------------------------------------------------------
// Trigger: add_buffs_to_new_units
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_add_buffs_to_new_units_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((lib66284E8B_gv_death_zone_active == true) && (lib66284E8B_gv_preparation_active == false) && lib66284E8B_gf_acceptable_unit_for_death_zone(EventUnitCreatedUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "disable_hp_regen", EventUnitCreatedUnit(), 1);
    UnitBehaviorAdd(EventUnitCreatedUnit(), "death_zone_protect", EventUnitCreatedUnit(), 1);
    UnitBehaviorAdd(EventUnitCreatedUnit(), "death_zone_damage", EventUnitCreatedUnit(), lib66284E8B_gf_get_buff_count(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_add_buffs_to_new_units_Init () {
    lib66284E8B_gt_add_buffs_to_new_units = TriggerCreate("lib66284E8B_gt_add_buffs_to_new_units_Func");
    TriggerAddEventUnitCreated(lib66284E8B_gt_add_buffs_to_new_units, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: queen_created
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_queen_created_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((lib66284E8B_gv_death_zone_active == true) && ((UnitGetType(EventUnitCreatedUnit()) == "Queen") || (UnitGetType(EventUnitCreatedUnit()) == "QueenBurrowed"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib66284E8B_gf_update_queen_protection(UnitGetOwner(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_queen_created_Init () {
    lib66284E8B_gt_queen_created = TriggerCreate("lib66284E8B_gt_queen_created_Func");
    TriggerAddEventUnitCreated(lib66284E8B_gt_queen_created, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: queen_died
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_queen_died_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((lib66284E8B_gv_death_zone_active == true) && ((UnitGetType(EventUnit()) == "Queen") || (UnitGetType(EventUnit()) == "QueenBurrowed"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib66284E8B_gf_update_queen_protection(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_queen_died_Init () {
    lib66284E8B_gt_queen_died = TriggerCreate("lib66284E8B_gt_queen_died_Func");
    TriggerAddEventUnitDied(lib66284E8B_gt_queen_died, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hatch_created
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_hatch_created_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((lib66284E8B_gv_death_zone_active == true) && ((UnitGetType(EventUnitCreatedUnit()) == "Hatchery") || (UnitGetType(EventUnitCreatedUnit()) == "Lair") || (UnitGetType(EventUnitCreatedUnit()) == "Hive"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib66284E8B_gf_update_queen_protection(UnitGetOwner(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_hatch_created_Init () {
    lib66284E8B_gt_hatch_created = TriggerCreate("lib66284E8B_gt_hatch_created_Func");
    TriggerAddEventUnitCreated(lib66284E8B_gt_hatch_created, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: hatch_died
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_hatch_died_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((lib66284E8B_gv_death_zone_active == true) && ((UnitGetType(EventUnit()) == "Hatchery") || (UnitGetType(EventUnit()) == "Lair") || (UnitGetType(EventUnit()) == "Hive"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib66284E8B_gf_update_queen_protection(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_hatch_died_Init () {
    lib66284E8B_gt_hatch_died = TriggerCreate("lib66284E8B_gt_hatch_died_Func");
    TriggerAddEventUnitDied(lib66284E8B_gt_hatch_died, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: enter_death_zone
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_enter_death_zone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((lib66284E8B_gv_death_zone_active == true) && (lib66284E8B_gv_preparation_active == false) && lib66284E8B_gf_acceptable_unit_for_death_zone(EventUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "death_zone_protection_permanent", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_enter_death_zone_Init () {
    lib66284E8B_gt_enter_death_zone = TriggerCreate("lib66284E8B_gt_enter_death_zone_Func");
    TriggerAddEventUnitRegion(lib66284E8B_gt_enter_death_zone, null, RegionCircle(RegionGetCenter(RegionPlayableMap()), lib66284E8B_gv_death_zone_radius), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: leave_death_zone
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_gt_leave_death_zone_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((lib66284E8B_gv_death_zone_active == true) && (lib66284E8B_gv_preparation_active == false) && lib66284E8B_gf_acceptable_unit_for_death_zone(EventUnit())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "death_zone_protection_permanent", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib66284E8B_gt_leave_death_zone_Init () {
    lib66284E8B_gt_leave_death_zone = TriggerCreate("lib66284E8B_gt_leave_death_zone_Func");
    TriggerAddEventUnitRegion(lib66284E8B_gt_leave_death_zone, null, RegionCircle(RegionGetCenter(RegionPlayableMap()), lib66284E8B_gv_death_zone_radius), false);
}

void lib66284E8B_InitTriggers () {
    lib66284E8B_gt_setobserver_Init();
    lib66284E8B_gt_create_hill_Init();
    lib66284E8B_gt_fill_filter_Init();
    lib66284E8B_gt_preparation_timer_Init();
    lib66284E8B_gt_preparation_end_Init();
    lib66284E8B_gt_get_time_for_win_Init();
    lib66284E8B_gt_cycle_Init();
    lib66284E8B_gt_create_koth_timer_window_Init();
    lib66284E8B_gt_koth_winner_Init();
    lib66284E8B_gt_player_defeated_Init();
    lib66284E8B_gt_create_death_zone_Init();
    lib66284E8B_gt_add_buffs_to_new_units2_Init();
    lib66284E8B_gt_add_buffs_to_new_units_Init();
    lib66284E8B_gt_queen_created_Init();
    lib66284E8B_gt_queen_died_Init();
    lib66284E8B_gt_hatch_created_Init();
    lib66284E8B_gt_hatch_died_Init();
    lib66284E8B_gt_enter_death_zone_Init();
    lib66284E8B_gt_leave_death_zone_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib66284E8B_InitLib_completed = false;

void lib66284E8B_InitLib () {
    if (lib66284E8B_InitLib_completed) {
        return;
    }

    lib66284E8B_InitLib_completed = true;

    lib66284E8B_InitLibraries();
    lib66284E8B_InitVariables();
    lib66284E8B_InitTriggers();
}

