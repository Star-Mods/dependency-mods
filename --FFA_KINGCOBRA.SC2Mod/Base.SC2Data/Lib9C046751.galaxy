include "TriggerLibs/NativeLib"
include "Lib66284E8B_h"

include "Lib9C046751_h"

//--------------------------------------------------------------------------------------------------
// Library: BLOODLUST
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib9C046751_InitLibraries () {
    libNtve_InitVariables();
    lib66284E8B_InitVariables();
}

// Variable Initialization
bool lib9C046751_InitVariables_completed = false;

void lib9C046751_InitVariables () {
    int init_i;

    if (lib9C046751_InitVariables_completed) {
        return;
    }

    lib9C046751_InitVariables_completed = true;

    lib9C046751_gv_blood_lust_preparation_timer = TimerCreate();
    lib9C046751_gv_blood_lust_preparation_timer_window = c_timerWindowNone;
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib9C046751_gv_blood_lust_timers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib9C046751_gv_blood_lust_timer_windows[init_i] = c_timerWindowNone;
    }
    lib9C046751_gv_blood_lust_leaderboard = c_boardNone;
}

// Functions
bool lib9C046751_gf_acceptable_unit_for_blood_lust_damage (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "TemplarArchive") || (UnitGetType(lp_unit) == "Assimilator") || (UnitGetType(lp_unit) == "Gateway") || (UnitGetType(lp_unit) == "WarpGate") || (UnitGetType(lp_unit) == "RoboticsFacility") || (UnitGetType(lp_unit) == "Stargate") || (UnitGetType(lp_unit) == "CyberneticsCore") || (UnitGetType(lp_unit) == "FleetBeacon") || (UnitGetType(lp_unit) == "Nexus") || (UnitGetType(lp_unit) == "Forge") || (UnitGetType(lp_unit) == "Pylon") || (UnitGetType(lp_unit) == "RoboticsBay") || (UnitGetType(lp_unit) == "TwilightCouncil") || (UnitGetType(lp_unit) == "DarkShrine") || (UnitGetType(lp_unit) == "PhotonCannon") || (UnitGetType(lp_unit) == "ShieldBattery") || (UnitGetType(lp_unit) == "FusionCore") || (UnitGetType(lp_unit) == "SupplyDepotLowered") || (UnitGetType(lp_unit) == "SupplyDepot") || (UnitGetType(lp_unit) == "OrbitalCommandFlying") || (UnitGetType(lp_unit) == "OrbitalCommand") || (UnitGetType(lp_unit) == "StarportReactor") || (UnitGetType(lp_unit) == "BarracksReactor") || (UnitGetType(lp_unit) == "FactoryReactor") || (UnitGetType(lp_unit) == "Reactor") || (UnitGetType(lp_unit) == "MissileTurret") || (UnitGetType(lp_unit) == "SensorTower") || (UnitGetType(lp_unit) == "PlanetaryFortress") || (UnitGetType(lp_unit) == "Refinery") || (UnitGetType(lp_unit) == "StarportTechLab") || (UnitGetType(lp_unit) == "BarracksTechLab") || (UnitGetType(lp_unit) == "FactoryTechLab") || (UnitGetType(lp_unit) == "TechLab") || (UnitGetType(lp_unit) == "StarportFlying") || (UnitGetType(lp_unit) == "Starport") || (UnitGetType(lp_unit) == "CommandCenterFlying") || (UnitGetType(lp_unit) == "CommandCenter") || (UnitGetType(lp_unit) == "BarracksFlying") || (UnitGetType(lp_unit) == "Barracks") || (UnitGetType(lp_unit) == "EngineeringBay") || (UnitGetType(lp_unit) == "Factory") || (UnitGetType(lp_unit) == "FactoryFlying") || (UnitGetType(lp_unit) == "Bunker") || (UnitGetType(lp_unit) == "Armory") || (UnitGetType(lp_unit) == "GhostAcademy") || (UnitGetType(lp_unit) == "InfestationPit") || (UnitGetType(lp_unit) == "Extractor") || (UnitGetType(lp_unit) == "EvolutionChamber") || (UnitGetType(lp_unit) == "GreaterSpire") || (UnitGetType(lp_unit) == "Spire") || (UnitGetType(lp_unit) == "NydusCanal") || (UnitGetType(lp_unit) == "Hive") || (UnitGetType(lp_unit) == "NydusNetwork") || (UnitGetType(lp_unit) == "RoachWarren") || (UnitGetType(lp_unit) == "SporeCrawlerUprooted") || (UnitGetType(lp_unit) == "SporeCrawler") || (UnitGetType(lp_unit) == "SpineCrawlerUprooted") || (UnitGetType(lp_unit) == "SpineCrawler") || (UnitGetType(lp_unit) == "LurkerDenMP") || (UnitGetType(lp_unit) == "HydraliskDen") || (UnitGetType(lp_unit) == "UltraliskCavern") || (UnitGetType(lp_unit) == "SpawningPool") || (UnitGetType(lp_unit) == "Lair") || (UnitGetType(lp_unit) == "Hatchery") || (UnitGetType(lp_unit) == "BanelingNest"))) {
        return true;
    }
    else {
        return false;
    }
}

bool lib9C046751_gf_acceptable_unit_for_bloodlust (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "Adept") || (UnitGetType(lp_unit) == "Archon") || (UnitGetType(lp_unit) == "Carrier") || (UnitGetType(lp_unit) == "Colossus") || (UnitGetType(lp_unit) == "DarkTemplar") || (UnitGetType(lp_unit) == "Disruptor") || (UnitGetType(lp_unit) == "HighTemplar") || (UnitGetType(lp_unit) == "Immortal") || (UnitGetType(lp_unit) == "Interceptor") || (UnitGetType(lp_unit) == "Mothership") || (UnitGetType(lp_unit) == "MothershipCore") || (UnitGetType(lp_unit) == "Observer") || (UnitGetType(lp_unit) == "ObserverSiegeMode") || (UnitGetType(lp_unit) == "Oracle") || (UnitGetType(lp_unit) == "Phoenix") || (UnitGetType(lp_unit) == "Probe") || (UnitGetType(lp_unit) == "Sentry") || (UnitGetType(lp_unit) == "Stalker") || (UnitGetType(lp_unit) == "Tempest") || (UnitGetType(lp_unit) == "VoidRay") || (UnitGetType(lp_unit) == "WarpPrismPhasing") || (UnitGetType(lp_unit) == "WarpPrism") || (UnitGetType(lp_unit) == "Zealot") || (UnitGetType(lp_unit) == "Banshee") || (UnitGetType(lp_unit) == "Battlecruiser") || (UnitGetType(lp_unit) == "Cyclone") || (UnitGetType(lp_unit) == "Ghost") || (UnitGetType(lp_unit) == "HellionTank") || (UnitGetType(lp_unit) == "Hellion") || (UnitGetType(lp_unit) == "Liberator") || (UnitGetType(lp_unit) == "LiberatorAG") || (UnitGetType(lp_unit) == "Marauder") || (UnitGetType(lp_unit) == "Marine") || (UnitGetType(lp_unit) == "Medivac") || (UnitGetType(lp_unit) == "Raven") || (UnitGetType(lp_unit) == "Reaper") || (UnitGetType(lp_unit) == "SCV") || (UnitGetType(lp_unit) == "SiegeTankSieged") || (UnitGetType(lp_unit) == "SiegeTank") || (UnitGetType(lp_unit) == "Thor") || (UnitGetType(lp_unit) == "ThorAP") || (UnitGetType(lp_unit) == "VikingAssault") || (UnitGetType(lp_unit) == "VikingFighter") || (UnitGetType(lp_unit) == "WidowMine") || (UnitGetType(lp_unit) == "WidowMineBurrowed") || (UnitGetType(lp_unit) == "Baneling") || (UnitGetType(lp_unit) == "BanelingBurrowed") || (UnitGetType(lp_unit) == "BanelingCocoon") || (UnitGetType(lp_unit) == "BroodLord") || (UnitGetType(lp_unit) == "BroodLordCocoon") || (UnitGetType(lp_unit) == "Corruptor") || (UnitGetType(lp_unit) == "Drone") || (UnitGetType(lp_unit) == "DroneBurrowed") || (UnitGetType(lp_unit) == "Hydralisk") || (UnitGetType(lp_unit) == "HydraliskBurrowed") || (UnitGetType(lp_unit) == "Infestor") || (UnitGetType(lp_unit) == "InfestorBurrowed") || (UnitGetType(lp_unit) == "LurkerMPBurrowed") || (UnitGetType(lp_unit) == "LurkerMP") || (UnitGetType(lp_unit) == "LurkerMPEgg") || (UnitGetType(lp_unit) == "Mutalisk") || (UnitGetType(lp_unit) == "Overlord") || (UnitGetType(lp_unit) == "OverlordTransport") || (UnitGetType(lp_unit) == "Overseer") || (UnitGetType(lp_unit) == "OverseerSiegeMode") || (UnitGetType(lp_unit) == "OverlordCocoon") || (UnitGetType(lp_unit) == "Queen") || (UnitGetType(lp_unit) == "QueenBurrowed") || (UnitGetType(lp_unit) == "Ravager") || (UnitGetType(lp_unit) == "RavagerBurrowed") || (UnitGetType(lp_unit) == "RavagerCocoon") || (UnitGetType(lp_unit) == "Roach") || (UnitGetType(lp_unit) == "RoachBurrowed") || (UnitGetType(lp_unit) == "SwarmHostMP") || (UnitGetType(lp_unit) == "SwarmHostBurrowedMP") || (UnitGetType(lp_unit) == "Ultralisk") || (UnitGetType(lp_unit) == "UltraliskBurrowed") || (UnitGetType(lp_unit) == "Viper") || (UnitGetType(lp_unit) == "Zergling") || (UnitGetType(lp_unit) == "ZerglingBurrowed"))) {
        return true;
    }
    else {
        return false;
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: blood_lust_init
//--------------------------------------------------------------------------------------------------
bool lib9C046751_gt_blood_lust_init_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_show_timer;
    int lv_preparation_time;

    // Automatic Variable Declarations
    string auto9B6D0AE6_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameAttributeGameValue("5") == "0002"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(PlayerGroupActive()) <= 8)) {
        lib9C046751_gv_blood_lust_enabled = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_9C046751_86BA4E4A"));
        if ((GameAttributeGameValue("1") == "0004")) {
            lv_show_timer = true;
        }

        auto9B6D0AE6_val = GameAttributeGameValue("4");
        if (auto9B6D0AE6_val == "0001") {
            lv_preparation_time = 1;
        }
        else if (auto9B6D0AE6_val == "0002") {
            lv_preparation_time = 300;
        }
        else if (auto9B6D0AE6_val == "0003") {
            lv_preparation_time = 600;
        }
        else if (auto9B6D0AE6_val == "0004") {
            lv_preparation_time = 900;
        }
        else if (auto9B6D0AE6_val == "0005") {
            lv_preparation_time = 1200;
        }
        else if (auto9B6D0AE6_val == "0006") {
            lv_preparation_time = 1500;
        }
        else {
            lv_preparation_time = 300;
        }
        if ((lv_preparation_time < 300)) {
            lv_show_timer = true;
            lv_preparation_time = 300;
        }

        TimerStart(lib9C046751_gv_blood_lust_preparation_timer, lv_preparation_time, false, c_timeReal);
        if ((lv_show_timer == true)) {
            TimerWindowCreate(lib9C046751_gv_blood_lust_preparation_timer, StringExternal("Param/Value/lib_9C046751_E23B11E1"), true, false);
            lib9C046751_gv_blood_lust_preparation_timer_window = TimerWindowLastCreated();
            TimerWindowSetAnchor(lib9C046751_gv_blood_lust_preparation_timer_window, c_anchorTopRight, 0, 20);
            TimerWindowShowBorder(lib9C046751_gv_blood_lust_preparation_timer_window, false);
            TimerWindowSetFixedHeight(lib9C046751_gv_blood_lust_preparation_timer_window, 30);
        }

    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_9C046751_854731E4"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9C046751_gt_blood_lust_init_Init () {
    lib9C046751_gt_blood_lust_init = TriggerCreate("lib9C046751_gt_blood_lust_init_Func");
    TriggerAddEventMapInit(lib9C046751_gt_blood_lust_init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: blood_lust_preparation_end
//--------------------------------------------------------------------------------------------------
bool lib9C046751_gt_blood_lust_preparation_end_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto3044B2F5_g;
    int auto3044B2F5_var;
    playergroup auto1A2B4768_g;
    int auto1A2B4768_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TimerWindowDestroy(lib9C046751_gv_blood_lust_preparation_timer_window);
    lib9C046751_gv_blood_lust_active = true;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_9C046751_15E4A63F"));
    auto3044B2F5_g = PlayerGroupActive();
    auto3044B2F5_var = -1;
    while (true) {
        auto3044B2F5_var = PlayerGroupNextPlayer(auto3044B2F5_g, auto3044B2F5_var);
        if (auto3044B2F5_var < 0) { break; }
        TimerStart(lib9C046751_gv_blood_lust_timers[auto3044B2F5_var], 60.0, false, c_timeReal);
        TextExpressionSetToken("Param/Expression/lib_9C046751_EA77E9F2", "A", StringExternal("Param/Value/lib_9C046751_1AF90470"));
        TextExpressionSetToken("Param/Expression/lib_9C046751_EA77E9F2", "B", TextWithColor(PlayerName(auto3044B2F5_var), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto3044B2F5_var, false))));
        TimerWindowCreate(TimerLastStarted(), TextExpressionAssemble("Param/Expression/lib_9C046751_EA77E9F2"), false, false);
        lib9C046751_gv_blood_lust_timer_windows[auto3044B2F5_var] = TimerWindowLastCreated();
        TimerWindowSetAnchor(lib9C046751_gv_blood_lust_timer_windows[auto3044B2F5_var], c_anchorTopRight, 0, 15);
        TimerWindowShow(lib9C046751_gv_blood_lust_timer_windows[auto3044B2F5_var], PlayerGroupSingle(auto3044B2F5_var), true);
        TimerWindowShowBorder(lib9C046751_gv_blood_lust_timer_windows[auto3044B2F5_var], false);
        TimerWindowSetFixedHeight(lib9C046751_gv_blood_lust_timer_windows[auto3044B2F5_var], 25);
    }
    BoardCreate(2, 1, StringExternal("Param/Value/lib_9C046751_8631E514"), Color(100.00, 100.00, 100.00));
    lib9C046751_gv_blood_lust_leaderboard = BoardLastCreated();
    BoardSetState(lib9C046751_gv_blood_lust_leaderboard, PlayerGroupAll(), c_boardStateShowing, false);
    BoardSetState(lib9C046751_gv_blood_lust_leaderboard, lib66284E8B_gv_observerGroup, c_boardStateShowing, true);
    BoardSetState(lib9C046751_gv_blood_lust_leaderboard, PlayerGroupAll(), c_boardStateShowTitle, true);
    BoardSetState(lib9C046751_gv_blood_lust_leaderboard, PlayerGroupAll(), c_boardStateShowHeader, false);
    BoardSetPlayerColumn(lib9C046751_gv_blood_lust_leaderboard, 1, false);
    auto1A2B4768_g = PlayerGroupActive();
    auto1A2B4768_var = -1;
    while (true) {
        auto1A2B4768_var = PlayerGroupNextPlayer(auto1A2B4768_g, auto1A2B4768_var);
        if (auto1A2B4768_var < 0) { break; }
        BoardPlayerAdd(lib9C046751_gv_blood_lust_leaderboard, auto1A2B4768_var);
        BoardItemSetTextColor(lib9C046751_gv_blood_lust_leaderboard, 1, (auto1A2B4768_var + 1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(auto1A2B4768_var, false)));
        BoardItemSetFontSize(lib9C046751_gv_blood_lust_leaderboard, 1, (auto1A2B4768_var + 1), 20);
        BoardItemSetText(lib9C046751_gv_blood_lust_leaderboard, 2, (auto1A2B4768_var + 1), StringExternal("Param/Value/lib_9C046751_A4FA782E"));
        BoardItemSetFontSize(lib9C046751_gv_blood_lust_leaderboard, 2, (auto1A2B4768_var + 1), 20);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9C046751_gt_blood_lust_preparation_end_Init () {
    lib9C046751_gt_blood_lust_preparation_end = TriggerCreate("lib9C046751_gt_blood_lust_preparation_end_Func");
    TriggerAddEventTimer(lib9C046751_gt_blood_lust_preparation_end, lib9C046751_gv_blood_lust_preparation_timer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: blood_lust_leaderboard_cycle
//--------------------------------------------------------------------------------------------------
bool lib9C046751_gt_blood_lust_leaderboard_cycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_time_left;
    int lv_seconds_left;

    // Automatic Variable Declarations
    playergroup autoF52921B1_g;
    int autoF52921B1_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib9C046751_gv_blood_lust_enabled == true))) {
            return false;
        }

        if (!((lib9C046751_gv_blood_lust_active == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF52921B1_g = PlayerGroupActive();
    autoF52921B1_var = -1;
    while (true) {
        autoF52921B1_var = PlayerGroupNextPlayer(autoF52921B1_g, autoF52921B1_var);
        if (autoF52921B1_var < 0) { break; }
        lv_time_left = TimerGetRemaining(lib9C046751_gv_blood_lust_timers[autoF52921B1_var]);
        lv_seconds_left = CeilingI(lv_time_left);
        BoardItemSetText(lib9C046751_gv_blood_lust_leaderboard, 2, (autoF52921B1_var + 1), TextTimeFormat(StringToText("<min2/>:<sec2/>"), lv_seconds_left));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9C046751_gt_blood_lust_leaderboard_cycle_Init () {
    lib9C046751_gt_blood_lust_leaderboard_cycle = TriggerCreate("lib9C046751_gt_blood_lust_leaderboard_cycle_Func");
    TriggerAddEventTimePeriodic(lib9C046751_gt_blood_lust_leaderboard_cycle, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: blood_lust_timer_end
//--------------------------------------------------------------------------------------------------
bool lib9C046751_gt_blood_lust_timer_end_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoE1F3861C_ae = 16;
    const int autoE1F3861C_ai = 1;
    unitgroup auto39CD52FD_g;
    int auto39CD52FD_u;
    unit auto39CD52FD_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib9C046751_gv_blood_lust_active == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_i = 0;
    for ( ; ( (autoE1F3861C_ai >= 0 && lv_i <= autoE1F3861C_ae) || (autoE1F3861C_ai < 0 && lv_i >= autoE1F3861C_ae) ) ; lv_i += autoE1F3861C_ai ) {
        if ((EventTimer() == lib9C046751_gv_blood_lust_timers[lv_i])) {
            auto39CD52FD_g = UnitGroup(null, lv_i, RegionPlayableMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
            auto39CD52FD_u = UnitGroupCount(auto39CD52FD_g, c_unitCountAll);
            for (;; auto39CD52FD_u -= 1) {
                auto39CD52FD_var = UnitGroupUnitFromEnd(auto39CD52FD_g, auto39CD52FD_u);
                if (auto39CD52FD_var == null) { break; }
                if (lib9C046751_gf_acceptable_unit_for_blood_lust_damage(auto39CD52FD_var)) {
                    UnitBehaviorAdd(auto39CD52FD_var, "blood_lust_damage", auto39CD52FD_var, 1);
                }

            }
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9C046751_gt_blood_lust_timer_end_Init () {
    lib9C046751_gt_blood_lust_timer_end = TriggerCreate("lib9C046751_gt_blood_lust_timer_end_Func");
    TriggerAddEventTimer(lib9C046751_gt_blood_lust_timer_end, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: blood_lust_unit_die
//--------------------------------------------------------------------------------------------------
bool lib9C046751_gt_blood_lust_unit_die_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB1BEBF13_g;
    int autoB1BEBF13_u;
    unit autoB1BEBF13_var;
    unitgroup auto654AD5C2_g;
    int auto654AD5C2_u;
    unit auto654AD5C2_var;

    // Conditions
    if (testConds) {
        if (!((lib9C046751_gv_blood_lust_enabled == true))) {
            return false;
        }

        if (!((lib9C046751_gv_blood_lust_active == true))) {
            return false;
        }

        if (!((EventPlayer() != libNtve_gf_KillingPlayer()))) {
            return false;
        }

        if (!(((EventPlayer() >= 1) && (EventPlayer() <= 8)))) {
            return false;
        }

        if (!(((libNtve_gf_KillingPlayer() >= 1) && (libNtve_gf_KillingPlayer() <= 8)))) {
            return false;
        }

        if (!((lib9C046751_gf_acceptable_unit_for_bloodlust(EventUnit()) || lib9C046751_gf_acceptable_unit_for_blood_lust_damage(EventUnit())))) {
            return false;
        }

        if (!((libNtve_gf_PlayerIsEnemy(EventPlayer(), libNtve_gf_KillingPlayer(), libNtve_ge_PlayerRelation_Enemy) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(lib9C046751_gv_blood_lust_timers[EventPlayer()]) <= 1.0)) {
        autoB1BEBF13_g = UnitGroup(null, EventPlayer(), RegionPlayableMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        autoB1BEBF13_u = UnitGroupCount(autoB1BEBF13_g, c_unitCountAll);
        for (;; autoB1BEBF13_u -= 1) {
            autoB1BEBF13_var = UnitGroupUnitFromEnd(autoB1BEBF13_g, autoB1BEBF13_u);
            if (autoB1BEBF13_var == null) { break; }
            if (lib9C046751_gf_acceptable_unit_for_blood_lust_damage(autoB1BEBF13_var)) {
                UnitBehaviorRemove(autoB1BEBF13_var, "blood_lust_damage", c_unitBehaviorCountAll);
            }

        }
    }

    TimerRestart(lib9C046751_gv_blood_lust_timers[EventPlayer()]);
    if ((TimerGetRemaining(lib9C046751_gv_blood_lust_timers[libNtve_gf_KillingPlayer()]) <= 1.0)) {
        auto654AD5C2_g = UnitGroup(null, libNtve_gf_KillingPlayer(), RegionPlayableMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0);
        auto654AD5C2_u = UnitGroupCount(auto654AD5C2_g, c_unitCountAll);
        for (;; auto654AD5C2_u -= 1) {
            auto654AD5C2_var = UnitGroupUnitFromEnd(auto654AD5C2_g, auto654AD5C2_u);
            if (auto654AD5C2_var == null) { break; }
            if (lib9C046751_gf_acceptable_unit_for_blood_lust_damage(auto654AD5C2_var)) {
                UnitBehaviorRemove(auto654AD5C2_var, "blood_lust_damage", c_unitBehaviorCountAll);
            }

        }
    }

    TimerRestart(lib9C046751_gv_blood_lust_timers[libNtve_gf_KillingPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9C046751_gt_blood_lust_unit_die_Init () {
    lib9C046751_gt_blood_lust_unit_die = TriggerCreate("lib9C046751_gt_blood_lust_unit_die_Func");
    TriggerAddEventUnitDied(lib9C046751_gt_blood_lust_unit_die, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: blood_lust_unit_created
//--------------------------------------------------------------------------------------------------
bool lib9C046751_gt_blood_lust_unit_created_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9C046751_gv_blood_lust_enabled == true))) {
            return false;
        }

        if (!((lib9C046751_gv_blood_lust_active == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitCreatedUnit()) >= 1) && (UnitGetOwner(EventUnitCreatedUnit()) <= 8)))) {
            return false;
        }

        if (!(lib9C046751_gf_acceptable_unit_for_blood_lust_damage(EventUnitCreatedUnit()))) {
            return false;
        }

        if (!((TimerGetRemaining(lib9C046751_gv_blood_lust_timers[UnitGetOwner(EventUnitCreatedUnit())]) == 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitCreatedUnit(), "blood_lust_damage", EventUnitCreatedUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9C046751_gt_blood_lust_unit_created_Init () {
    lib9C046751_gt_blood_lust_unit_created = TriggerCreate("lib9C046751_gt_blood_lust_unit_created_Func");
    TriggerAddEventUnitCreated(lib9C046751_gt_blood_lust_unit_created, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: player defeated
//--------------------------------------------------------------------------------------------------
bool lib9C046751_gt_playerdefeated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib9C046751_gv_blood_lust_enabled == true))) {
            return false;
        }

        if (!((lib9C046751_gv_blood_lust_active == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    BoardPlayerRemove(lib9C046751_gv_blood_lust_leaderboard, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib9C046751_gt_playerdefeated_Init () {
    lib9C046751_gt_playerdefeated = TriggerCreate("lib9C046751_gt_playerdefeated_Func");
    TriggerAddEventPlayerLeft(lib9C046751_gt_playerdefeated, c_playerAny, c_gameResultUndecided);
}

void lib9C046751_InitTriggers () {
    lib9C046751_gt_blood_lust_init_Init();
    lib9C046751_gt_blood_lust_preparation_end_Init();
    lib9C046751_gt_blood_lust_leaderboard_cycle_Init();
    lib9C046751_gt_blood_lust_timer_end_Init();
    lib9C046751_gt_blood_lust_unit_die_Init();
    lib9C046751_gt_blood_lust_unit_created_Init();
    lib9C046751_gt_playerdefeated_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib9C046751_InitLib_completed = false;

void lib9C046751_InitLib () {
    if (lib9C046751_InitLib_completed) {
        return;
    }

    lib9C046751_InitLib_completed = true;

    lib9C046751_InitLibraries();
    lib9C046751_InitVariables();
    lib9C046751_InitTriggers();
}

include "Lib66284E8B"

